// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  INGAME
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String     @unique
  hash        String
  userName    String     @unique
  firstName   String?
  lastName    String?
  avatar      String?
  avatarFile  AvatarFile?
  ownedGames  Game[]     @relation("owner")
  playerGames Game[]     @relation("player")
  wins        Int
  losses      Int
  socket      String?
  tfaSecret   String?
  isTfaEnable Boolean    @default(false)
  status      UserStatus @default(ONLINE)
  friends     User[]     @relation("Friends")
  friendsOf   User[]     @relation("Friends")

  chanOp    Channel[] @relation("channel_ops")
  chanOwner Channel[]
  channels  Channel[] @relation("channel_members")

  messages Message[]
}

model Channel {
  id        Int       @id @default(autoincrement())
  title     String?   @unique
  password  String?
  type      String
  mode      String
  owner     User?     @relation(fields: [ownerId], references: [id])
  ownerId   Int?
  operators User[]    @relation("channel_ops")
  members   User[]    @relation("channel_members")
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner       User @relation("owner", fields: [ownerId], references: [id])
  ownerId     Int
  player      User @relation("player", fields: [playerId], references: [id])
  playerId    Int
  ownerScore  Int
  playerScore Int
  winnerId    Int
}

model AvatarFile {
  id     Int    @id @default(autoincrement())
  name   String
  size   Int
  data   Bytes
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}
